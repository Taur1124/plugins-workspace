import { invoke, Channel } from '@tauri-apps/api/core';
import * as TAURI_API_EVENT from '@tauri-apps/api/event';

// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.
/** user-defined commands **/
const commands = {
    async getCurrentPosition(options) {
        try {
            return {
                status: "ok",
                data: await invoke("plugin:geolocation|get_current_position", {
                    options,
                }),
            };
        }
        catch (e) {
            if (e instanceof Error)
                throw e;
            else
                return { status: "error", error: e };
        }
    },
    async watchPosition(options, channel) {
        try {
            return {
                status: "ok",
                data: await invoke("plugin:geolocation|watch_position", {
                    options,
                    channel,
                }),
            };
        }
        catch (e) {
            if (e instanceof Error)
                throw e;
            else
                return { status: "error", error: e };
        }
    },
    async clearWatch(channelId) {
        try {
            return {
                status: "ok",
                data: await invoke("plugin:geolocation|clear_watch", {
                    channelId,
                }),
            };
        }
        catch (e) {
            if (e instanceof Error)
                throw e;
            else
                return { status: "error", error: e };
        }
    },
    async checkPermissions() {
        try {
            return {
                status: "ok",
                data: await invoke("plugin:geolocation|check_permissions"),
            };
        }
        catch (e) {
            if (e instanceof Error)
                throw e;
            else
                return { status: "error", error: e };
        }
    },
    async requestPermissions(permissions) {
        try {
            return {
                status: "ok",
                data: await invoke("plugin:geolocation|request_permissions", {
                    permissions,
                }),
            };
        }
        catch (e) {
            if (e instanceof Error)
                throw e;
            else
                return { status: "error", error: e };
        }
    },
};
/** user-defined events **/
__makeEvents__({
    randomNumber: "plugin:geolocation:random-number",
});
function __makeEvents__(mappings) {
    return new Proxy({}, {
        get: (_, event) => {
            const name = mappings[event];
            return new Proxy((() => { }), {
                apply: (_, __, [window]) => ({
                    listen: (arg) => window.listen(name, arg),
                    once: (arg) => window.once(name, arg),
                    emit: (arg) => window.emit(name, arg),
                }),
                get: (_, command) => {
                    switch (command) {
                        case "listen":
                            return (arg) => TAURI_API_EVENT.listen(name, arg);
                        case "once":
                            return (arg) => TAURI_API_EVENT.once(name, arg);
                        case "emit":
                            return (arg) => TAURI_API_EVENT.emit(name, arg);
                    }
                },
            });
        },
    });
}

// Copyright 2019-2023 Tauri Programme within The Commons Conservancy
// SPDX-License-Identifier: Apache-2.0
// SPDX-License-Identifier: MIT
/* eslint-disable @typescript-eslint/unbound-method */
async function watchPosition(options, 
// TODO: This can receive errors too
cb) {
    const channel = new Channel();
    channel.onmessage = cb;
    await commands.watchPosition(options, channel);
    return channel.id;
}
const { getCurrentPosition, clearWatch, checkPermissions, requestPermissions, } = commands;
// export { events };

export { checkPermissions, clearWatch, getCurrentPosition, requestPermissions, watchPosition };
