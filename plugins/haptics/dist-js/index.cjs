'use strict';

var core = require('@tauri-apps/api/core');
var TAURI_API_EVENT = require('@tauri-apps/api/event');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var TAURI_API_EVENT__namespace = /*#__PURE__*/_interopNamespaceDefault(TAURI_API_EVENT);

// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.
/** user-defined commands **/
const commands = {
    async vibrate(duration) {
        try {
            return { status: "ok", data: await core.invoke("plugin:haptics|vibrate", { duration }) };
        }
        catch (e) {
            if (e instanceof Error)
                throw e;
            else
                return { status: "error", error: e };
        }
    }
};
/** user-defined events **/
__makeEvents__({
    randomNumber: "plugin:haptics:random-number"
});
function __makeEvents__(mappings) {
    return new Proxy({}, {
        get: (_, event) => {
            const name = mappings[event];
            return new Proxy((() => { }), {
                apply: (_, __, [window]) => ({
                    listen: (arg) => window.listen(name, arg),
                    once: (arg) => window.once(name, arg),
                    emit: (arg) => window.emit(name, arg),
                }),
                get: (_, command) => {
                    switch (command) {
                        case "listen":
                            return (arg) => TAURI_API_EVENT__namespace.listen(name, arg);
                        case "once":
                            return (arg) => TAURI_API_EVENT__namespace.once(name, arg);
                        case "emit":
                            return (arg) => TAURI_API_EVENT__namespace.emit(name, arg);
                    }
                },
            });
        },
    });
}

// Copyright 2019-2023 Tauri Programme within The Commons Conservancy
// SPDX-License-Identifier: Apache-2.0
// SPDX-License-Identifier: MIT
/* eslint-disable @typescript-eslint/unbound-method */
const { vibrate } = commands;
// export { events };

exports.vibrate = vibrate;
