if("__TAURI__"in window){var __TAURI_HTTP__=function(e){"use strict";var t=Object.defineProperty,n=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)},r=(e,t,r)=>(n(e,t,"read from private field"),r?r.call(e):t.get(e)),s=(e,t,r,s)=>(n(e,t,"write to private field"),s?s.call(e,r):t.set(e,r),r);function i(e,t=!1){let n=window.crypto.getRandomValues(new Uint32Array(1))[0],r=`_${n}`;return Object.defineProperty(window,r,{value:n=>(t&&Reflect.deleteProperty(window,r),e?.(n)),writable:!1,configurable:!0}),n}((e,n)=>{for(var r in n)t(e,r,{get:n[r],enumerable:!0})})({},{Channel:()=>a,PluginListener:()=>c,addPluginListener:()=>u,convertFileSrc:()=>h,invoke:()=>d,transformCallback:()=>i});var o,a=class{constructor(){this.__TAURI_CHANNEL_MARKER__=!0,((e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)})(this,o,(()=>{})),this.id=i((e=>{r(this,o).call(this,e)}))}set onmessage(e){s(this,o,e)}get onmessage(){return r(this,o)}toJSON(){return`__CHANNEL__:${this.id}`}};o=new WeakMap;var l,c=class{constructor(e,t,n){this.plugin=e,this.event=t,this.channelId=n}async unregister(){return d(`plugin:${this.plugin}|remove_listener`,{event:this.event,channelId:this.channelId})}};async function u(e,t,n){let r=new a;return r.onmessage=n,d(`plugin:${e}|register_listener`,{event:t,handler:r}).then((()=>new c(e,t,r.id)))}async function d(e,t={}){return new Promise(((n,r)=>{let s=i((e=>{n(e),Reflect.deleteProperty(window,`_${o}`)}),!0),o=i((e=>{r(e),Reflect.deleteProperty(window,`_${s}`)}),!0);window.__TAURI_IPC__({cmd:e,callback:s,error:o,...t})}))}function h(e,t="asset"){let n=encodeURIComponent(e);return navigator.userAgent.includes("Windows")?`https://${t}.localhost/${n}`:`${t}://localhost/${n}`}e.ResponseType=void 0,(l=e.ResponseType||(e.ResponseType={}))[l.JSON=1]="JSON",l[l.Text=2]="Text",l[l.Binary=3]="Binary";class p{constructor(e,t){this.type=e,this.payload=t}static form(e){const t={},n=(e,n)=>{if(null!==n){let r;r="string"==typeof n?n:n instanceof Uint8Array||Array.isArray(n)?Array.from(n):n instanceof File?{file:n.name,mime:n.type,fileName:n.name}:"string"==typeof n.file?{file:n.file,mime:n.mime,fileName:n.fileName}:{file:Array.from(n.file),mime:n.mime,fileName:n.fileName},t[String(e)]=r}};if(e instanceof FormData)for(const[t,r]of e)n(t,r);else for(const[t,r]of Object.entries(e))n(t,r);return new p("Form",t)}static json(e){return new p("Json",e)}static text(e){return new p("Text",e)}static bytes(e){return new p("Bytes",Array.from(e instanceof ArrayBuffer?new Uint8Array(e):e))}}class f{constructor(e){this.url=e.url,this.status=e.status,this.ok=this.status>=200&&this.status<300,this.headers=e.headers,this.rawHeaders=e.rawHeaders,this.data=e.data}}class y{constructor(e){this.id=e}async drop(){return d("plugin:http|drop_client",{client:this.id})}async request(t){const n=!t.responseType||t.responseType===e.ResponseType.JSON;return n&&(t.responseType=e.ResponseType.Text),d("plugin:http|request",{clientId:this.id,options:t}).then((e=>{const t=new f(e);if(n){try{t.data=JSON.parse(t.data)}catch(e){if(t.ok&&""===t.data)t.data={};else if(t.ok)throw Error(`Failed to parse response \`${t.data}\` as JSON: ${e};\n              try setting the \`responseType\` option to \`ResponseType.Text\` or \`ResponseType.Binary\` if the API does not return a JSON response.`)}return t}return t}))}async get(e,t){return this.request({method:"GET",url:e,...t})}async post(e,t,n){return this.request({method:"POST",url:e,body:t,...n})}async put(e,t,n){return this.request({method:"PUT",url:e,body:t,...n})}async patch(e,t){return this.request({method:"PATCH",url:e,...t})}async delete(e,t){return this.request({method:"DELETE",url:e,...t})}}async function m(e){return d("plugin:http|create_client",{options:e}).then((e=>new y(e)))}let _=null;return e.Body=p,e.Client=y,e.Response=f,e.fetch=async function(e,t){var n;return null===_&&(_=await m()),_.request({url:e,method:null!==(n=null==t?void 0:t.method)&&void 0!==n?n:"GET",...t})},e.getClient=m,e}({});Object.defineProperty(window.__TAURI__,"http",{value:__TAURI_HTTP__})}
